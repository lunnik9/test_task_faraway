// Code generated by MockGen. DO NOT EDIT.
// Source: services/challenger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	services "test_task_faraway/services"

	gomock "github.com/golang/mock/gomock"
)

// MockChallenger is a mock of Challenger interface.
type MockChallenger struct {
	ctrl     *gomock.Controller
	recorder *MockChallengerMockRecorder
}

// MockChallengerMockRecorder is the mock recorder for MockChallenger.
type MockChallengerMockRecorder struct {
	mock *MockChallenger
}

// NewMockChallenger creates a new mock instance.
func NewMockChallenger(ctrl *gomock.Controller) *MockChallenger {
	mock := &MockChallenger{ctrl: ctrl}
	mock.recorder = &MockChallengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallenger) EXPECT() *MockChallengerMockRecorder {
	return m.recorder
}

// GenerateChallenge mocks base method.
func (m *MockChallenger) GenerateChallenge(data services.UserData) (string, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChallenge", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateChallenge indicates an expected call of GenerateChallenge.
func (mr *MockChallengerMockRecorder) GenerateChallenge(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChallenge", reflect.TypeOf((*MockChallenger)(nil).GenerateChallenge), data)
}

// ValidateChallenge mocks base method.
func (m *MockChallenger) ValidateChallenge(challenge string, answer int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateChallenge", challenge, answer)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateChallenge indicates an expected call of ValidateChallenge.
func (mr *MockChallengerMockRecorder) ValidateChallenge(challenge, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateChallenge", reflect.TypeOf((*MockChallenger)(nil).ValidateChallenge), challenge, answer)
}
